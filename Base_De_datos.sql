DROP DATABASE IF EXISTS transportesspringboot;
CREATE DATABASE IF NOT EXISTS transportesspringboot;
USE transportesspringboot;

DROP TABLE IF EXISTS GRUPO_USUARIO;
CREATE TABLE IF NOT EXISTS GRUPO_USUARIO (
	ID	INT UNSIGNED AUTO_INCREMENT,
    NOMBRE	VARCHAR (255) NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_ID (ID)
);

INSERT INTO GRUPO_USUARIO (NOMBRE)
	VALUES 
		('Fuencarral'), ('Tetuán');

DROP TABLE IF EXISTS ROL_USUARIO;
CREATE TABLE IF NOT EXISTS ROL_USUARIO (
	ID	TINYINT UNSIGNED AUTO_INCREMENT,
    NOMBRE	VARCHAR (100) NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_ID (ID)
);

INSERT INTO ROL_USUARIO (NOMBRE)
	VALUES 
		('Administrador total'), 
        ('Encargado del departamento'),
        ('Colaborador del departamento');

DROP TABLE IF EXISTS USUARIO;
CREATE TABLE IF NOT EXISTS USUARIO (
	ID	INT UNSIGNED AUTO_INCREMENT,
    NOMBRE	VARCHAR (100) NOT NULL,
    ALIAS	VARCHAR (200) NOT NULL,
    CONTRASENA	VARCHAR (200) NOT NULL,
    COD_ROL	TINYINT UNSIGNED NOT NULL,
    COD_GRUPO INT UNSIGNED,
    
    CONSTRAINT PRIMARY KEY PK_ID (ID),
	CONSTRAINT FOREIGN KEY FK_COD_ROL_USUARIO (COD_ROL) REFERENCES ROL_USUARIO (ID) ON DELETE NO ACTION ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_GRUPO_USUARIO (COD_GRUPO) REFERENCES GRUPO_USUARIO (ID) ON DELETE SET NULL ON UPDATE CASCADE
);

INSERT INTO USUARIO (NOMBRE, CONTRASENA, ALIAS, COD_ROL, COD_GRUPO)
	VALUES 
		('iker', 'iker', 'ikeriano', 1, 1), 
        ('fuencarral1', 'fuencarral1', 'Usuario de Fuencarral 1', 3, 1),
		('tetuan1', 'tetuan1', 'Usuario de Tetuán 1', 2, 2),
		('tetuan2', 'tetuan2', 'Usuario de Tetuán 2', 3, 2);

DROP TABLE IF EXISTS ROL_INVOLUCRADO;
CREATE TABLE IF NOT EXISTS ROL_INVOLUCRADO (
	ID TINYINT UNSIGNED,
	DESCRIPCION VARCHAR (100) NOT NULL,
    
	CONSTRAINT PRIMARY KEY PK_ID_ROL_INVOLUCRADO (ID)
);

INSERT INTO ROL_INVOLUCRADO (ID, DESCRIPCION)
VALUES 
	(1, 'Viajero'),
	(2, 'Conductor');
    
DROP TABLE IF EXISTS INVOLUCRADO;
CREATE TABLE IF NOT EXISTS INVOLUCRADO (
	ID	INT UNSIGNED AUTO_INCREMENT,
    NOMBRE	VARCHAR (100) NOT NULL,
    APELLIDOS	VARCHAR (100),
    ACTIVO	BOOL NOT NULL,
    NUMERO_PLAZAS TINYINT UNSIGNED NOT NULL,
    COD_ROL	TINYINT UNSIGNED NOT NULL,
    COD_USUARIO_PROPIETARIO INT UNSIGNED NOT NULL,
    COD_GRUPO_USUARIO INT UNSIGNED,
    
    CONSTRAINT PRIMARY KEY PK_ID (ID),
    CONSTRAINT FOREIGN KEY FK_COD_ROL_POR_INVOLUCRADO (COD_ROL) REFERENCES ROL_INVOLUCRADO (ID) ON DELETE NO ACTION ON UPDATE CASCADE,
	CONSTRAINT FOREIGN KEY FK_COD_USUARIO_PROPIETARIO (COD_USUARIO_PROPIETARIO) REFERENCES USUARIO (ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FOREIGN KEY FK_COD_GRUPO_USUARIO (COD_GRUPO_USUARIO) REFERENCES GRUPO_USUARIO (ID) ON DELETE SET NULL ON UPDATE CASCADE
);

INSERT  INTO INVOLUCRADO (NOMBRE, APELLIDOS, ACTIVO, NUMERO_PLAZAS, COD_ROL, COD_USUARIO_PROPIETARIO, COD_GRUPO_USUARIO)
VALUES 
	('Adolfo', '', TRUE, 1, 1, 1, 1),
    ('Julio', '', TRUE, 1, 1, 1, 1),
    ('Carmen', '', TRUE, 1, 1, 1, 1),
    ('Enriqueta', '', TRUE, 1, 1, 1, 1),
    ('Pilar', 'Pérez', TRUE, 1, 1, 1, 1),
	('Pepe y Bea', '', TRUE, 2, 1, 1, 1),
    ('Roselia', '', TRUE, 1, 1, 1, 1),
    ('Nicolás', '', TRUE, 1, 1, 1, 1),
    ('Ino', '', TRUE, 1, 1, 1, 1),
    ('Tolli', '', TRUE, 1, 1, 1, 1),
    ('Ramona', '', TRUE, 1, 1, 1, 1),
	('Silvia', '', TRUE, 1, 1, 1, 1),
    ('Iker', 'Quijano', TRUE, 4, 2, 1, 1),
    ('Paco y Carmela', '', TRUE, 3, 2, 1, 1),
    ('Juan Manuel', '', TRUE, 4, 2, 1, 1),
    ('Familia Cárceles', '', TRUE, 1, 2, 1, 1),
    ('Familia Conde', '', TRUE, 3, 2, 1, 1),
    ('Frutos y Rosi', '', TRUE, 2, 2, 1, 1),
    ('Luisi y Jacinto', '', TRUE, 2, 2, 1, 1),
    ('Verónica', '', TRUE, 4, 2, 1, 1),
    ('Abel y Mariana', '', TRUE, 2, 2, 1, 1),
    ('Familia Cerezo', '', TRUE, 1, 2, 1, 1),
    ('Vanessa', '', TRUE, 2, 2, 1, 1)
    -- ('Ikeriano no compartido', '', TRUE, 1, 1, 1, NULL),
    -- ('Fuencarral1 no compartido', '', TRUE, 1, 1, 2, NULL)
    ;

DROP TABLE IF EXISTS DIA_DE_LA_SEMANA;
CREATE TABLE IF NOT EXISTS DIA_DE_LA_SEMANA (
	ID TINYINT UNSIGNED,
    NOMBRE ENUM('Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo') NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_ID_DIA_DE_LA_SEMANA (ID)
);

INSERT INTO DIA_DE_LA_SEMANA (ID, NOMBRE)
VALUES 
	(2, 'Lunes'), 
    (3, 'Martes'),
    (4, 'Miércoles'),
    (5, 'Jueves'),
    (6, 'Viernes'),
    (7, 'Sábado'),
    (1, 'Domingo');

DROP TABLE IF EXISTS DIA_TRANSPORTE_SEMANAL;
CREATE TABLE IF NOT EXISTS DIA_TRANSPORTE_SEMANAL (
	ID	TINYINT UNSIGNED AUTO_INCREMENT,
    DESCRIPCION	VARCHAR (100) NOT NULL,
    COD_DIA_DE_LA_SEMANA	ENUM('1', '2', '3', '4', '5', '6', '7') NOT NULL,
    ACTIVO	BOOL NOT NULL,
    COD_USUARIO_PROPIETARIO INT UNSIGNED NOT NULL,
    COD_GRUPO_USUARIO INT UNSIGNED,
    
    CONSTRAINT PRIMARY KEY PK_ID_DIA_TRANSPORTE_SEMANAL (ID),
    CONSTRAINT FOREIGN KEY FK_COD_DIA_DE_LA_SEMANA (COD_DIA_DE_LA_SEMANA) REFERENCES DIA_DE_LA_SEMANA (ID) ON DELETE NO ACTION ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_USUARIO_PROPIETARIO (COD_USUARIO_PROPIETARIO) REFERENCES USUARIO (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_GRUPO_USUARIO (COD_GRUPO_USUARIO) REFERENCES GRUPO_USUARIO (ID) ON DELETE SET NULL ON UPDATE CASCADE
);

INSERT INTO DIA_TRANSPORTE_SEMANAL (DESCRIPCION, COD_DIA_DE_LA_SEMANA, ACTIVO, COD_USUARIO_PROPIETARIO, COD_GRUPO_USUARIO)
VALUES 
	('Vida y Ministerio', 3, TRUE, 1, 1)
    ,('Reunión Pública', 1, TRUE, 1, 1)
    -- ,('Vida y Ministerio', 6, FALSE, 1, 1)
;
-- SELECT * FROM DIA_TRANSPORTE_SEMANAL;

DROP TABLE IF EXISTS PLANTILLA;
CREATE TABLE IF NOT EXISTS PLANTILLA (
	ID INT UNSIGNED AUTO_INCREMENT,
    NOMBRE	VARCHAR (200) NOT NULL,
    ANNO VARCHAR (4) NOT NULL,
    MES ENUM('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12') NOT NULL,
    COD_USUARIO_PROPIETARIO INT UNSIGNED NOT NULL,
    COD_GRUPO_USUARIO INT UNSIGNED,
    
    CONSTRAINT PRIMARY KEY PK_ID (ID),
    CONSTRAINT FOREIGN KEY FK_COD_USUARIO_PROPIETARIO (COD_USUARIO_PROPIETARIO) REFERENCES USUARIO (ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FOREIGN KEY FK_COD_GRUPO_USUARIO (COD_GRUPO_USUARIO) REFERENCES GRUPO_USUARIO (ID) ON DELETE SET NULL ON UPDATE CASCADE
);

-- Se rellena al crear la plantilla y se va cambiando según se va haciendo la plantilla
DROP TABLE IF EXISTS FECHA_TRANSPORTE_POR_PLANTILLA;
CREATE TABLE IF NOT EXISTS FECHA_TRANSPORTE_POR_PLANTILLA (
	ID INT UNSIGNED AUTO_INCREMENT,
    COD_PLANTILLA INT UNSIGNED NOT NULL,
    FECHA_TRANSPORTE VARCHAR(10) NOT NULL,
    COD_DIA_DE_LA_SEMANA ENUM('1', '2', '3', '4', '5', '6', '7') NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_FECHA_TRANSPORTE_POR_PLANTILLA (ID),
	CONSTRAINT FOREIGN KEY FK_COD_DIA_DE_LA_SEMANA (COD_DIA_DE_LA_SEMANA) REFERENCES DIA_DE_LA_SEMANA (ID) ON DELETE NO ACTION ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_PLANTILLA(COD_PLANTILLA) REFERENCES PLANTILLA (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

/* 
 * Tabla que sirve para el historico de plantillas. Por ejemplo, puede ser que ya no estén algunos conductores o viajeros que 
 * estaban antes. Si se quiere consultar una plantilla de hace un ano, esta tabla almacena los involucrados que habia para esa plantilla.
 * Se rellena al crear la plantilla con los involucrados que haya activos en la tabla INVOLUCRADO en ese momento. 
 * 
 * El campo PLAZAS sirver para guardar cuantas plazas ocupaba u ofrecia el involucrado en ese momento.
*/
DROP TABLE IF EXISTS INVOLUCRADO_POR_PLANTILLA;
CREATE TABLE IF NOT EXISTS INVOLUCRADO_POR_PLANTILLA (
    COD_INVOLUCRADO INT UNSIGNED,
    COD_PLANTILLA INT UNSIGNED,
    NOMBRE	VARCHAR (100) NOT NULL,
    APELLIDOS	VARCHAR (100),
    PLAZAS TINYINT UNSIGNED NOT NULL,
    COD_ROL TINYINT UNSIGNED NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_COD_INVOLUCRADO_POR_PLANTILLA (COD_INVOLUCRADO, COD_PLANTILLA),
    CONSTRAINT FOREIGN KEY FK_COD_INVOLUCRADO (COD_INVOLUCRADO) REFERENCES INVOLUCRADO (ID) ON DELETE NO ACTION ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_PLANTILLA_POR_PLANTILLA (COD_PLANTILLA) REFERENCES PLANTILLA (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_ROL (COD_ROL) REFERENCES ROL_INVOLUCRADO (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- SELECT * FROM INVOLUCRADO_POR_PLANTILLA;

-- Se rellena al crear la plantilla
DROP TABLE IF EXISTS DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE;
CREATE TABLE IF NOT EXISTS DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE (
	ID INT UNSIGNED AUTO_INCREMENT,
	COD_INVOLUCRADO INT UNSIGNED,
    COD_FECHA_TRANSPORTE INT UNSIGNED,
    
    CONSTRAINT PRIMARY KEY PK_INVOLUCRADO_POR_FECHA_TRANSPORTE_POR_PLANTILLA (ID),
    CONSTRAINT FOREIGN KEY FK_COD_INVOLUCRADO_POR_DIA_TRANSPORTE (COD_INVOLUCRADO) REFERENCES INVOLUCRADO_POR_PLANTILLA (COD_INVOLUCRADO) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_FECHA_TRANSPORTE(COD_FECHA_TRANSPORTE) REFERENCES FECHA_TRANSPORTE_POR_PLANTILLA (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

DELIMITER ;
                    
-- Se rellena al crear la plantilla y se va cambiando según se va haciendo la plantilla
DROP TABLE IF EXISTS PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE;
CREATE TABLE IF NOT EXISTS PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE (
	COD_CONDUCTOR INT UNSIGNED NOT NULL,
    COD_FECHA_TRANSPORTE INT UNSIGNED NOT NULL,
    PLAZAS_DISPONIBLES	TINYINT UNSIGNED NOT NULL,
    PLAZAS_OCUPADAS	TINYINT UNSIGNED NOT NULL DEFAULT 0,
    
    CONSTRAINT PRIMARY KEY PK_PLAZAS_DISPONIBLES_INVOLUCRADO_POR_PLANTILLA (COD_CONDUCTOR, COD_FECHA_TRANSPORTE),
    CONSTRAINT FOREIGN KEY FK_COD_FECHA_TRANSPORTE (COD_FECHA_TRANSPORTE) REFERENCES FECHA_TRANSPORTE_POR_PLANTILLA (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_INVOLUCRADO_POR_DIA_TRANSPORTE (COD_CONDUCTOR) REFERENCES INVOLUCRADO_POR_PLANTILLA (COD_INVOLUCRADO) ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TRIGGER IF EXISTS after_insert_plantilla;
DELIMITER //
CREATE TRIGGER after_insert_plantilla
AFTER INSERT ON PLANTILLA
FOR EACH ROW
BEGIN

	-- Variables para el cursor de insertar fechas de transporte de la plantilla
    DECLARE cursor_ft_terminado INT DEFAULT FALSE;
    DECLARE cod_dia_de_la_semana INT;

    DECLARE cursor_insertar_en_FECHA_TRANSPORTE_POR_PLANTILLA CURSOR FOR
        SELECT 
            dts.COD_DIA_DE_LA_SEMANA
			FROM DIA_TRANSPORTE_SEMANAL dts
				WHERE dts.ACTIVO = 1;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET cursor_ft_terminado = 1;    
	
    
	-- Inserta las fechas de transporte para la plantilla
    OPEN cursor_insertar_en_FECHA_TRANSPORTE_POR_PLANTILLA;    
		read_loop: LOOP
			FETCH cursor_insertar_en_FECHA_TRANSPORTE_POR_PLANTILLA INTO cod_dia_de_la_semana;

			IF cursor_ft_terminado THEN
				LEAVE read_loop;
			END IF;

			INSERT INTO FECHA_TRANSPORTE_POR_PLANTILLA (FECHA_TRANSPORTE, COD_DIA_DE_LA_SEMANA, COD_PLANTILLA)
			SELECT dias_del_mes.dia_de_la_semana, cod_dia_de_la_semana, NEW.ID
				FROM (
					SELECT 
						DATE_FORMAT(fecha, '%Y-%m-%d') AS dia_de_la_semana
						FROM (
							SELECT CONCAT(NEW.ANNO, '-', NEW.MES, '-', 1) + INTERVAL (n.n + 10 * m.n) DAY AS fecha
								FROM (
								SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3
									UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7
									UNION ALL SELECT 8 UNION ALL SELECT 9
								) n,
								(
									SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3
									UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7
									UNION ALL SELECT 8 UNION ALL SELECT 9
								) m
							) as fechas
							WHERE 
								MONTH(fecha) = NEW.MES
								AND YEAR(fecha) = NEW.ANNO
								AND DAYOFWEEK(fecha) = cod_dia_de_la_semana
				) dias_del_mes;
            
		END LOOP;
    CLOSE cursor_insertar_en_FECHA_TRANSPORTE_POR_PLANTILLA;
    
    -- Inserta los involucrados activos que haya en ese momento en la tabla INVOLUCRADO
    INSERT INTO INVOLUCRADO_POR_PLANTILLA (COD_INVOLUCRADO, COD_PLANTILLA, NOMBRE, APELLIDOS, PLAZAS, COD_ROL)
    SELECT inv.ID, NEW.ID, inv.NOMBRE, inv.APELLIDOS, inv.NUMERO_PLAZAS, inv.COD_ROL
		FROM INVOLUCRADO inv
			WHERE inv.ACTIVO = 1;
            
	CALL procedure_insert_DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE(NEW.ID);
	CALL procedure_insert_PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE(NEW.ID);
    
END //

DELIMITER ;

DROP PROCEDURE IF EXISTS procedure_insert_DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE;
DELIMITER $$
CREATE PROCEDURE procedure_insert_DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE(
    IN id_plantilla INT
)
BEGIN
    
    -- Variables para el cursor de insertar la disponibilidad de cada involucrado por cada fecha de transporte de la plantilla
    DECLARE cursor_dipft_terminado INT DEFAULT FALSE;
    DECLARE cod_fecha_transporte INT;

	DECLARE cursor_insertar_en_DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE CURSOR FOR
        SELECT ftpp.ID
			FROM FECHA_TRANSPORTE_POR_PLANTILLA ftpp
				WHERE ftpp.COD_PLANTILLA = id_plantilla;
                
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET cursor_dipft_terminado = 1;

	-- Inserta la dipsonibilidad de cada involucrado para cada fecha de transporte de la plantilla creada
    OPEN cursor_insertar_en_DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE;
		read_loop: LOOP
			FETCH cursor_insertar_en_DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE INTO cod_fecha_transporte;

			IF cursor_dipft_terminado THEN
				LEAVE read_loop;
			END IF;

			INSERT INTO DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE (COD_INVOLUCRADO, COD_FECHA_TRANSPORTE)
				SELECT DISTINCT ipp.COD_INVOLUCRADO, cod_fecha_transporte
					FROM INVOLUCRADO_POR_PLANTILLA ipp
						INNER JOIN DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL dipdts
							ON dipdts.COD_INVOLUCRADO = ipp.COD_INVOLUCRADO
						LEFT JOIN AUSENCIA_POR_INVOLUCRADO api
							ON ipp.COD_INVOLUCRADO = api.COD_INVOLUCRADO
					WHERE 
						dipdts.DISPONIBLE = TRUE
						AND ipp.COD_PLANTILLA = id_plantilla
						AND api.COD_INVOLUCRADO IS NULL;
            
		END LOOP;
    CLOSE cursor_insertar_en_DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE;
    
END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS procedure_insert_PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE;
DELIMITER $$
CREATE PROCEDURE procedure_insert_PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE(
	IN id_plantilla INT
)
BEGIN
    
    -- Variables para el cursor de insertar las plazas ocupadas de cada conductor por cada fecha de transporte de la plantilla
    DECLARE cursor_pocpft_terminado INT DEFAULT FALSE;
    DECLARE cod_fecha_transporte_pocpft INT;
    DECLARE cod_involucrado INT;
    
	DECLARE cursor_insertar_en_PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE CURSOR FOR
        SELECT 
			dipft.COD_INVOLUCRADO as cod_involucrado,
            ftpp.ID as cod_fecha_transporte_pocpft
			FROM DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE dipft
				INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
					ON dipft.COD_FECHA_TRANSPORTE = ftpp.ID
				WHERE ftpp.ID = id_plantilla;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET cursor_pocpft_terminado = 1;
    
    -- Inserta la dipsonibilidad de cada involucrado para cada fecha de transporte de la plantilla creada
    OPEN cursor_insertar_en_PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE;
		read_loop: LOOP
			FETCH cursor_insertar_en_PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE INTO cod_involucrado, cod_fecha_transporte_pocpft;

			IF cursor_pocpft_terminado THEN
				LEAVE read_loop;
			END IF;

			-- Si el involucrado que se ha insertado es un conductor, inserta las plazas ocupadas
			IF EXISTS (
				SELECT * 
					FROM INVOLUCRADO_POR_PLANTILLA ipp
						INNER JOIN ROL_INVOLUCRADO roli
							ON ipp.COD_ROL = roli.ID
						INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
							ON ftpp.COD_PLANTILLA = ipp.COD_PLANTILLA
						WHERE
							roli.DESCRIPCION = 'Conductor' 
							AND ipp.COD_INVOLUCRADO = cod_involucrado
							AND ftpp.ID = cod_fecha_transporte_pocpft
			) THEN
			
				INSERT INTO PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE 
						(COD_CONDUCTOR, COD_FECHA_TRANSPORTE, PLAZAS_DISPONIBLES, PLAZAS_OCUPADAS)
					SELECT cod_involucrado, cod_fecha_transporte_pocpft, ipp.PLAZAS, 0
						FROM INVOLUCRADO_POR_PLANTILLA ipp
							INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
								ON ftpp.COD_PLANTILLA = ipp.COD_PLANTILLA
						WHERE 
							ipp.COD_INVOLUCRADO = cod_involucrado
							AND ftpp.ID = cod_fecha_transporte_pocpft;
			END IF;
            
		END LOOP;
    CLOSE cursor_insertar_en_PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE;
    
END $$
DELIMITER ;

DROP TABLE IF EXISTS TRANSPORTE;
CREATE TABLE IF NOT EXISTS TRANSPORTE (
	COD_FECHA_TRANSPORTE INT UNSIGNED,
    COD_CONDUCTOR INT UNSIGNED NOT NULL,
    COD_VIAJERO INT UNSIGNED NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_COD_INVOLUCRADO_POR_TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO),
    CONSTRAINT FOREIGN KEY FK_COD_FECHA_TRANSPORTE_INVOLUCRADO_POR_TRANSPORTE (COD_FECHA_TRANSPORTE) REFERENCES FECHA_TRANSPORTE_POR_PLANTILLA (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_CONDUCTOR (COD_CONDUCTOR) REFERENCES INVOLUCRADO_POR_PLANTILLA (COD_INVOLUCRADO) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_VIAJERO (COD_VIAJERO) REFERENCES INVOLUCRADO_POR_PLANTILLA (COD_INVOLUCRADO) ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TRIGGER IF EXISTS after_insert_TRANSPORTE_POR_PLANTILLA;
delimiter $$
CREATE TRIGGER after_insert_TRANSPORTE_POR_PLANTILLA
	AFTER INSERT ON TRANSPORTE
FOR EACH ROW
BEGIN

	DECLARE numero_plazas_viajero INT;
    DECLARE numero_plazas_conductor_disponibles INT;
	DECLARE nombre_viajero TEXT;
    DECLARE nombre_conductor TEXT;
    
    SELECT ipp.PLAZAS
		FROM INVOLUCRADO_POR_PLANTILLA ipp
			INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
				ON ipp.COD_PLANTILLA = ftpp.COD_PLANTILLA
			INNER JOIN TRANSPORTE t
				ON ftpp.ID = t.COD_FECHA_TRANSPORTE
			WHERE 
				ipp.COD_INVOLUCRADO = NEW.COD_VIAJERO
                AND t.COD_FECHA_TRANSPORTE = NEW.COD_FECHA_TRANSPORTE
			LIMIT 1
					INTO numero_plazas_viajero;
    
	SELECT pocpft.PLAZAS_DISPONIBLES
		FROM PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE pocpft
			INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
				ON pocpft.COD_FECHA_TRANSPORTE = ftpp.ID
			WHERE 
				pocpft.COD_CONDUCTOR = NEW.COD_CONDUCTOR
                AND ftpp.ID = NEW.COD_FECHA_TRANSPORTE
					INTO numero_plazas_conductor_disponibles;
            
	IF numero_plazas_viajero > numero_plazas_conductor_disponibles THEN
		SELECT concat(ipp.NOMBRE, ' ' , ipp.APELLIDOS)
			FROM INVOLUCRADO_POR_PLANTILLA ipp
				INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
					ON ipp.COD_PLANTILLA = ftpp.COD_PLANTILLA
				INNER JOIN TRANSPORTE t
					ON ftpp.ID = t.COD_FECHA_TRANSPORTE
				WHERE 
					ipp.COD_INVOLUCRADO = NEW.COD_VIAJERO
                    AND t.COD_FECHA_TRANSPORTE = NEW.COD_FECHA_TRANSPORTE
						INTO nombre_viajero;
                    
		SELECT concat(ipp.NOMBRE, ' ' , ipp.APELLIDOS)
			FROM INVOLUCRADO_POR_PLANTILLA ipp
				INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
					ON ipp.COD_PLANTILLA = ftpp.COD_PLANTILLA
				INNER JOIN TRANSPORTE t
					ON ftpp.ID = t.COD_FECHA_TRANSPORTE
				WHERE 
					ipp.COD_INVOLUCRADO = NEW.COD_CONDUCTOR
                    AND t.COD_FECHA_TRANSPORTE = NEW.COD_FECHA_TRANSPORTE
						INTO nombre_conductor;
                    
        SET @errorMsg = CONCAT(nombre_conductor, ' no dispone de plazas suficientes para llevar a ', nombre_viajero, '.');
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = @errorMsg;
        
	ELSE 
		UPDATE PLAZAS_OCUPADAS_CONDUCTOR_POR_FECHA_TRANSPORTE pocpft
			SET pocpft.PLAZAS_OCUPADAS = pocpft.PLAZAS_OCUPADAS + numero_plazas_viajero
				WHERE 
					pocpft.COD_CONDUCTOR = NEW.COD_CONDUCTOR
                    AND pocpft.COD_FECHA_TRANSPORTE = NEW.COD_FECHA_TRANSPORTE;
    END IF;
            
END; $$

delimiter ;
                    
DROP TABLE IF EXISTS AUSENCIA_POR_INVOLUCRADO;
CREATE TABLE IF NOT EXISTS AUSENCIA_POR_INVOLUCRADO (
	ID	SMALLINT UNSIGNED AUTO_INCREMENT,
    COD_INVOLUCRADO INT UNSIGNED NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    FECHA_FIN DATE NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_AUSENCIA_INVOLUCRADO (ID),
    CONSTRAINT FOREIGN KEY FK_COD_INVOLUCRADO_POR_AUSENCIA (COD_INVOLUCRADO) REFERENCES INVOLUCRADO (ID) ON DELETE NO ACTION ON UPDATE CASCADE
);

INSERT INTO AUSENCIA_POR_INVOLUCRADO (COD_INVOLUCRADO, FECHA_INICIO, FECHA_FIN)
	VALUES 
		(5, '2024/06/16', '2024/06/22'),
        (6, '2024/06/22', '2024/06/27'),
        (14, '2024/05/11', '2024/05/13');
-- SELECT * FROM AUSENCIA_POR_INVOLUCRADO;

DROP TRIGGER IF EXISTS CHECK_FECHAS_INSERT_AUSENCIA_POR_INVOLUCRADO;
delimiter $$
CREATE TRIGGER CHECK_FECHAS_INSERT_AUSENCIA_POR_INVOLUCRADO BEFORE INSERT ON AUSENCIA_POR_INVOLUCRADO
FOR EACH ROW
BEGIN
    IF NEW.FECHA_INICIO >= NEW.FECHA_FIN THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La fecha de inicio debe ser menor que la fecha de fin de la ausencia .';
    END IF;
END; $$

delimiter ;

DROP TRIGGER IF EXISTS CHECK_FECHAS_UPDATE_AUSENCIA_POR_INVOLUCRADO;
delimiter $$
CREATE TRIGGER CHECK_FECHAS_UPDATE_AUSENCIA_POR_INVOLUCRADO BEFORE UPDATE ON AUSENCIA_POR_INVOLUCRADO
FOR EACH ROW
BEGIN
    IF NEW.FECHA_INICIO >= NEW.FECHA_FIN THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La fecha de inicio debe ser menor que la fecha de fin de la ausencia .';
    END IF;
END; $$

delimiter ;

DROP TABLE IF EXISTS DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL;
CREATE TABLE IF NOT EXISTS DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL (
	COD_INVOLUCRADO INT UNSIGNED,
    COD_DIA_TRANSPORTE_SEMANAL TINYINT UNSIGNED,
    DISPONIBLE BOOL NOT NULL,
    
    CONSTRAINT PRIMARY KEY PK_INVOLUCRADO_POR_DIA_TRANSPORTE (COD_INVOLUCRADO, COD_DIA_TRANSPORTE_SEMANAL),
    CONSTRAINT FOREIGN KEY FK_COD_INVOLUCRADO_POR_DIA_TRANSPORTE (COD_INVOLUCRADO) REFERENCES INVOLUCRADO (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY FK_COD_DIA_TRANSPORTE_POR_INVOLUCRADO (COD_DIA_TRANSPORTE_SEMANAL) REFERENCES DIA_TRANSPORTE_SEMANAL (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL (COD_INVOLUCRADO, COD_DIA_TRANSPORTE_SEMANAL, DISPONIBLE)
	SELECT i.ID, 1, TRUE
		FROM INVOLUCRADO i;
        
INSERT INTO DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL (COD_INVOLUCRADO, COD_DIA_TRANSPORTE_SEMANAL, DISPONIBLE)
	SELECT i.ID, 2, TRUE
		FROM INVOLUCRADO i;
        
/* TRANSPORTE */
/* SACAR LOS CONDUCTORES DE UNA PLANTILLA DISPONIBLES PARA UN DIA DE LA SEMANA EN CONCRETO*/
SELECT 
	ipp.COD_INVOLUCRADO as id_conductor,
	ipp.nombre,
    ftpp.FECHA_TRANSPORTE as FECHA
	FROM INVOLUCRADO_POR_PLANTILLA ipp 
		INNER JOIN ROL_INVOLUCRADO rol_conductor
			ON ipp.COD_ROL = rol_conductor.ID
            AND rol_conductor.DESCRIPCION = 'Conductor'
		INNER JOIN DISPONIBILIDAD_INVOLUCRADO_POR_FECHA_TRANSPORTE dipft
			ON dipft.COD_INVOLUCRADO = ipp.COD_INVOLUCRADO
		INNER JOIN FECHA_TRANSPORTE_POR_PLANTILLA ftpp
			ON dipft.COD_FECHA_TRANSPORTE = ftpp.ID
	WHERE 
		ipp.COD_PLANTILLA = 1
        -- AND dipft.COD_FECHA_TRANSPORTE = 1 -- VIDA Y MINISTERIO
	ORDER BY ipp.nombre DESC;

INSERT INTO PLANTILLA (NOMBRE, ANNO, MES, COD_USUARIO_PROPIETARIO, COD_GRUPO_USUARIO)
	VALUES 
		('mayo_2025', '2025', 5, 1, 1),
        ('junio_2025','2025', 6, 1, 1);

-- DOMINGO 2025-05-04
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 16, 11); -- Carceles, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 17, 3); -- Conde, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 17, 4); -- Conde, Enriqueta        
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 14, 5); -- Paco, Pilar P.
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 14, 2); -- Paco, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 14, 1); -- Paco, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 18, 8); -- Frutos y Rosi, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 18, 12); -- Frutos y Rosi, Silvia
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (8, 20, 6); -- Vero, Pepe y Bea
    
-- MARTES 2025-05-06
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (1, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (1, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (1, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (1, 23, 3); -- Vane, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (1, 23, 4); -- Vane, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (1, 19, 6); -- Luisi, Pepe y Bea

-- DOMINGO 2025-05-11
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 16, 11); -- Carceles, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 17, 3); -- Conde, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 17, 4); -- Conde, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 14, 5); -- Paco, Pilar P.
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 14, 2); -- Paco, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 14, 1); -- Paco, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 18, 8); -- Frutos y Rosi, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 18, 12); -- Frutos y Rosi, Silvia
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (10, 20, 6); -- Vero, Pepe y Bea

-- MARTES 2025-05-13
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (3, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (3, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (3, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (3, 23, 3); -- Vane, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (3, 23, 4); -- Vane, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (3, 19, 6); -- Luisi, Pepe y Bea

-- DOMINGO 2025-05-18
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 16, 11); -- Carceles, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 17, 3); -- Conde, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 17, 4); -- Conde, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 14, 5); -- Paco, Pilar P.
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 14, 2); -- Paco, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 14, 1); -- Paco, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 18, 8); -- Frutos y Rosi, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 18, 12); -- Frutos y Rosi, Silvia
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (9, 20, 6); -- Vero, Pepe y Bea

-- MARTES 2025-05-20
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (2, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (2, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (2, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (2, 23, 3); -- Vane, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (2, 23, 4); -- Vane, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (2, 19, 6); -- Luisi, Pepe y Bea

-- DOMINGO 2025-05-25
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 16, 11); -- Carceles, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 17, 3); -- Conde, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 17, 4); -- Conde, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 14, 5); -- Paco, Pilar P.
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 14, 2); -- Paco, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 14, 1); -- Paco, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 18, 8); -- Frutos y Rosi, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 18, 12); -- Frutos y Rosi, Silvia
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (11, 20, 6); -- Vero, Pepe y Bea

-- MARTES 2025-05-27
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (4, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (4, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (4, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (4, 23, 3); -- Vane, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (4, 23, 4); -- Vane, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (4, 19, 6); -- Luisi, Pepe y Bea

-- DOMINGO 2025-06-01
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 13, 8); -- Iker, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 23, 6); -- Vane, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 21, 3); -- Abel, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 21, 4); -- Abel, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (23, 20, 6); -- Vero, Pepe y Bea

-- MARTES 2025-06-03
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (16, 13, 6); -- Iker, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (16, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (16, 20, 3); -- Frutos y Rosi, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (16, 20, 4); -- Frutos y Rosi, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (16, 19, 1); -- Luisi, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (16, 19, 2); -- Luisi, Julio

-- DOMINGO 2025-06-08
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 13, 8); -- Iker, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 23, 6); -- Vane, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 21, 3); -- Abel, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 21, 4); -- Abel, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (22, 20, 6); -- Vero, Pepe y Bea

-- MARTES 2025-06-10
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (15, 13, 6); -- Iker, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (15, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (15, 20, 3); -- Frutos y Rosi, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (15, 20, 4); -- Frutos y Rosi, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (15, 19, 1); -- Luisi, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (15, 19, 2); -- Luisi, Julio

-- DOMINGO 2025-06-15
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 13, 8); -- Iker, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 23, 6); -- Vane, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 21, 3); -- Abel, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 21, 4); -- Abel, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (24, 20, 6); -- Vero, Pepe y Bea

-- MARTES 2025-06-17
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (17, 13, 6); -- Iker, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (17, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (17, 20, 3); -- Frutos y Rosi, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (17, 20, 4); -- Frutos y Rosi, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (17, 19, 1); -- Luisi, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (17, 19, 2); -- Luisi, Julio

-- DOMINGO 2025-06-22
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 13, 8); -- Iker, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 23, 6); -- Vane, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 21, 3); -- Abel, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 21, 4); -- Abel, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (26, 20, 6); -- Vero, Pepe y Bea

-- MARTES 2025-06-24
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (18, 13, 6); -- Iker, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (18, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (18, 20, 3); -- Frutos y Rosi, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (18, 20, 4); -- Frutos y Rosi, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (18, 19, 1); -- Luisi, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (18, 19, 2); -- Luisi, Julio

-- DOMINGO 2025-06-29
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 13, 1); -- Iker, Adolfo
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 13, 2); -- Iker, Julio
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 13, 11); -- Iker, Ramona
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 13, 8); -- Iker, Nico
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 23, 6); -- Vane, Pepe y Bea
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 21, 3); -- Abel, Carmen
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 21, 4); -- Abel, Enriqueta
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 20, 9); -- Vero, Ino 
INSERT INTO TRANSPORTE (COD_FECHA_TRANSPORTE, COD_CONDUCTOR, COD_VIAJERO)
	VALUES (25, 20, 6); -- Vero, Pepe y Bea

DROP PROCEDURE IF EXISTS crud_viajeros;

DELIMITER $$
CREATE PROCEDURE crud_viajeros(
	IN mostrar_viajeros_activos VARCHAR(4), -- Los valores que deberian llegarle son '0' o '1' o '0, 1' o '1, 0'
    IN cod_usuario TEXT,
    IN cod_grupo_usuario TEXT,
    IN elemento_inicial INT,
    IN tamano_pagina INT,
    IN orden TEXT
)

BEGIN
    DECLARE query_sql TEXT;
    DECLARE disponibilidad_por_dia_transporte TEXT;

	SET mostrar_viajeros_activos = COALESCE(mostrar_viajeros_activos, '0');
	SET cod_usuario = COALESCE(cod_usuario, '\'\'');
	SET cod_grupo_usuario = COALESCE(cod_grupo_usuario, '\'\'');
	SET elemento_inicial = COALESCE(elemento_inicial, 1);
	SET tamano_pagina = COALESCE(tamano_pagina, 10);
	SET orden = COALESCE(orden, 'viajero.ID DESC');

    -- Paso 1: Construir dinámicamente las columnas de dias de transporte
	SELECT 
		GROUP_CONCAT(DISTINCT CONCAT(
				disponibilidad_viajero.COD_DIA_TRANSPORTE_SEMANAL, ' as id_dia_transporte_', REPLACE(dia_transporte_semanal.DESCRIPCION, ' ', '_'), ',
				MAX(CASE WHEN disponibilidad_viajero.COD_DIA_TRANSPORTE_SEMANAL = \'',
                disponibilidad_viajero.COD_DIA_TRANSPORTE_SEMANAL,
                '\' THEN disponibilidad_viajero.DISPONIBLE ELSE 0 END) 
                					AS \'Asiste a ',
                dia_transporte_semanal.DESCRIPCION,
                '\' '))
	INTO disponibilidad_por_dia_transporte FROM
		DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL disponibilidad_viajero
			INNER JOIN DIA_TRANSPORTE_SEMANAL dia_transporte_semanal 
				ON dia_transporte_semanal.ID = disponibilidad_viajero.COD_DIA_TRANSPORTE_SEMANAL
		WHERE
			dia_transporte_semanal.ACTIVO = TRUE;

	-- SELECT disponibilidad_por_dia_transporte;
    -- SELECT cod_usuario;
    -- SELECT cod_grupo_usuario;
    -- SELECT mostrar_viajeros_activos;
    -- SELECT orden;
    -- SELECT elemento_inicial;
    -- SELECT tamano_pagina;
    
    -- Paso 2: Construir la consulta SQL completa
    SET @query_sql = CONCAT(
        "SELECT 
			total.total_registros,
			resultados.*
				FROM 
                (
					SELECT 
						viajero.id as 'Id',
						viajero.NOMBRE AS 'Nombre', 
						viajero.APELLIDOS AS 'Apellidos',
						viajero.NUMERO_PLAZAS as plazas_ocupadas,
						viajero.ACTIVO as activo,
						IF(ISNULL(viajero.COD_GRUPO_USUARIO), 0, 1) as usuario_compartido_grupo,
						IF(ISNULL(u.ALIAS), 0, u.ALIAS) as alias_usuario_propietario,
						u.ID as codigo_usuario_propietario,
						", disponibilidad_por_dia_transporte, "
					 FROM INVOLUCRADO viajero
						INNER JOIN ROL_INVOLUCRADO rol
							ON viajero.COD_ROL = rol.ID
						INNER JOIN DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL disponibilidad_viajero
							ON viajero.ID = disponibilidad_viajero.COD_INVOLUCRADO
						INNER JOIN USUARIO u
							ON viajero.COD_USUARIO_PROPIETARIO = u.ID
						WHERE 
							(viajero.COD_USUARIO_PROPIETARIO = ", cod_usuario, " OR viajero.COD_GRUPO_USUARIO = ", cod_grupo_usuario, ")
							AND rol.DESCRIPCION LIKE 'Viajero'
							AND viajero.activo IN (", mostrar_viajeros_activos ,")
						GROUP BY viajero.ID
						ORDER BY 
							", orden, ",
							CASE 
								WHEN codigo_usuario_propietario = ", cod_usuario ," THEN 0
								ELSE 1
							END, 
							viajero.activo DESC
						LIMIT ", elemento_inicial, ", ", tamano_pagina,
				") AS resultados
			CROSS JOIN 
                (
					 SELECT 
					COUNT(count_agrupado.total) AS total_registros
						FROM 
							(
								SELECT
									count(*) as total
										FROM INVOLUCRADO viajero
											INNER JOIN ROL_INVOLUCRADO rol
												ON viajero.COD_ROL = rol.ID
											INNER JOIN DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL disponibilidad_viajero
												ON viajero.ID = disponibilidad_viajero.COD_INVOLUCRADO
											INNER JOIN USUARIO u
												ON viajero.COD_USUARIO_PROPIETARIO = u.ID
										WHERE
											(viajero.COD_USUARIO_PROPIETARIO = ", cod_usuario, " OR viajero.COD_GRUPO_USUARIO = ", cod_grupo_usuario, ")
											AND rol.DESCRIPCION LIKE 'Viajero'
											AND viajero.activo IN (", mostrar_viajeros_activos ,")
										GROUP BY viajero.ID
							) as count_agrupado
				) AS total;"
    );
    
    SELECT @query_sql;
    
    -- Paso 3: Preparar y ejecutar la consulta dinámica
    PREPARE stmt FROM @query_sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END $$
DELIMITER ;
            
-- CALL crud_viajeros(1, 1, 1, null, null, null);

DELIMITER $$
CREATE PROCEDURE crud_conductores(
	IN mostrar_conductores_activos VARCHAR(4) -- Los valores que deberian llegarle son '0' o '1' o '0, 1' o '1, 0'
)
BEGIN
    DECLARE query_sql TEXT;
    DECLARE disponibilidad_por_dia_transporte TEXT;

    -- Paso 1: Construir dinámicamente las columnas de dias de transporte
    SELECT 
        GROUP_CONCAT(DISTINCT 
            CONCAT(
                "MAX(CASE WHEN disponibilidad_conductor.COD_DIA_TRANSPORTE_SEMANAL = '", disponibilidad_conductor.COD_DIA_TRANSPORTE_SEMANAL , "' THEN disponibilidad_conductor.DISPONIBLE ELSE 0 END) 
					AS 'Disponible para llevar a ", dia_transporte_semanal.DESCRIPCION , "'"
            )
        ) INTO disponibilidad_por_dia_transporte
    FROM 
        DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL disponibilidad_conductor
			INNER JOIN DIA_TRANSPORTE_SEMANAL dia_transporte_semanal
				ON dia_transporte_semanal.ID = disponibilidad_conductor.COD_DIA_TRANSPORTE_SEMANAL
			WHERE dia_transporte_semanal.ACTIVO = TRUE;

    -- Paso 2: Construir la consulta SQL completa
    SET @query_sql = CONCAT(
        "SELECT 
			conductor.NOMBRE AS 'Nombre', 
            conductor.APELLIDOS AS 'Apellidos',
            conductor.NUMERO_PLAZAS as 'Plazas ofrecidas',
            ", disponibilidad_por_dia_transporte, "
         FROM INVOLUCRADO conductor
			INNER JOIN ROL_INVOLUCRADO rol
				ON conductor.COD_ROL = rol.ID
			INNER JOIN DISPONIBILIDAD_INVOLUCRADO_POR_DIA_TRANSPORTE_SEMANAL disponibilidad_conductor
				ON conductor.ID = disponibilidad_conductor.COD_INVOLUCRADO
			WHERE 
				rol.DESCRIPCION LIKE 'Conductor'
                AND conductor.activo IN (", mostrar_conductores_activos ,")
                GROUP BY conductor.ID;"
    );

    -- Paso 3: Preparar y ejecutar la consulta dinámica
    PREPARE stmt FROM @query_sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END $$
DELIMITER ;

-- CALL crud_conductores('0, 1');

select * from  Transporte t
               WHERE
					t.cod_conductor = 15
                  AND cod_fecha_transporte = 8
                   -- AND cod_viajero = 1
                   ;